package com._project._project.ReportGenerator;

import com._project._project.Project.Project;
import com._project._project.Project.ProjectRepository;
import com._project._project.User.User;
import com._project._project.User.UserRepository;
import com.lowagie.text.*;
import com.lowagie.text.Font;
import com.lowagie.text.Image;
import com.lowagie.text.pdf.PdfWriter;
import org.jfree.chart.JFreeChart;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.lowagie.text.Document;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;

import com.lowagie.text.FontFactory;
import com.lowagie.text.Paragraph;

@Service
public class ReportGeneratorService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ProjectRepository projectRepository;

    @Autowired
    private ReportGeneratorRepository reportGeneratorRepository;

    private final String success = "success";

    public List<ReportGenerator> getCompanyReports(long currentUser_id){
        User currentUser = userRepository.findById(currentUser_id);
        if(currentUser == null) throw new RuntimeException("User not found");

        return currentUser.getCompany().getReports();
    }

    public byte[] getReportById(long report_id){
        ReportGenerator report = reportGeneratorRepository.findById(report_id);
        if(report == null) throw new RuntimeException("Report not found");

        JFreeChart fullChart = ReportUtils.createGraphDataChart(report.getGraphDataList());
        BufferedImage fullChartImage = fullChart.createBufferedImage(800, 400);
        ByteArrayOutputStream fullChartOutputStream = new ByteArrayOutputStream();

        JFreeChart revenueChart = ReportUtils.createGraphDataRevenueChart(report.getGraphDataList());
        BufferedImage revenueChartImage = revenueChart.createBufferedImage(800, 400);
        ByteArrayOutputStream revenueChartOutputStream = new ByteArrayOutputStream();

        try{
            ImageIO.write(fullChartImage, "png", fullChartOutputStream);
            ImageIO.write(revenueChartImage, "png", revenueChartOutputStream);
        }catch(IOException e){
            throw new RuntimeException(e);
        }

        ByteArrayOutputStream pdfOut = new ByteArrayOutputStream();

        try{
            Document document = new Document();
            PdfWriter.getInstance(document, pdfOut);
            document.open();

            //Creating and adding the title on document
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
            Paragraph title = new Paragraph("Project Data Report");
            title.setFont(titleFont);
            title.setAlignment(Paragraph.ALIGN_CENTER);
            title.setSpacingAfter(20f);
            document.add(title);

            //Populating the user and project data
            document.add(new Paragraph("Date: " + report.getReportDate()));
            document.add(new Paragraph("Project: " + report.getProjectName()));
            document.add(new Paragraph("Project ID: " + report.getProjectId()));
            document.add(new Paragraph("\n"));

            document.add(new Paragraph("Generated by: " + report.getEmployeeName()));
            document.add(new Paragraph("Employee ID: " + report.getEmployeeId()));
            document.add(new Paragraph("\n"));

            //Embed image
            Image chartPdfImage = Image.getInstance(fullChartOutputStream.toByteArray());
            chartPdfImage.scaleToFit(500, 300);
            document.add(chartPdfImage);

            Image revenueChartPdfImage = Image.getInstance(revenueChartOutputStream.toByteArray());
            revenueChartPdfImage.scaleToFit(500, 300);
            document.add(revenueChartPdfImage);

            document.close();
        }catch(Exception e){
            throw new RuntimeException(e);
        }

        return pdfOut.toByteArray();
    }

    public byte[] createReport(long currentUser_id, long project_id) {
        User currentUser = userRepository.findById(currentUser_id);
        Project project = projectRepository.findById(project_id);
        if(project == null) throw new RuntimeException("Project not found");

        //Data to populate report
        String employeeName = currentUser.getFirstName() + " " + currentUser.getLastName();
        String fileName = project.getName() + " Data Report";
        LocalDate date = LocalDate.now();

        //Chart creation, embed in report doc.
        JFreeChart chart = ReportUtils.createSalesChart(project.getSalesData());
        BufferedImage chartImage = chart.createBufferedImage(800, 400);
        ByteArrayOutputStream chartStream = new ByteArrayOutputStream();

        JFreeChart revenueChart = ReportUtils.createRevenueChart(project.getSalesData());
        BufferedImage revenueChartImage = revenueChart.createBufferedImage(800, 400);
        ByteArrayOutputStream revenueChartStream = new ByteArrayOutputStream();

        try {
            ImageIO.write(chartImage, "png", chartStream);
            ImageIO.write(revenueChartImage, "png", revenueChartStream);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }


            ByteArrayOutputStream pdfOut = new ByteArrayOutputStream();
        try{
            Document document = new Document();
            PdfWriter.getInstance(document, pdfOut);
            document.open();

            //Creating and adding the title on document
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 18);
            Paragraph title = new Paragraph("Project Data Report");
            title.setFont(titleFont);
            title.setAlignment(Paragraph.ALIGN_CENTER);
            title.setSpacingAfter(20f);
            document.add(title);

            //Populating the user and project data
            document.add(new Paragraph("Date: " + date));
            document.add(new Paragraph("Project: " + project.getName()));
            document.add(new Paragraph("Project ID: " + project.getId()));
            document.add(new Paragraph("\n"));

            document.add(new Paragraph("Generated by: " + employeeName));
            document.add(new Paragraph("Employee ID: " + currentUser.getId()));
            document.add(new Paragraph("\n"));

            //Embed image
            Image chartPdfImage = Image.getInstance(chartStream.toByteArray());
            chartPdfImage.scaleToFit(500, 300);
            document.add(chartPdfImage);

            Image revenueChartPdfImage = Image.getInstance(revenueChartStream.toByteArray());
            revenueChartPdfImage.scaleToFit(500, 300);
            document.add(revenueChartPdfImage);

            document.close();

        }catch(Exception e){
            throw new RuntimeException(e);
        }

        //Convert sales data to reportGraphData to save a record for a pdf
        List<ReportGraphData> copiedData = project.getSalesData().stream()
                .map(sd -> new ReportGraphData(sd.getDate(), sd.getIncome(), sd.getExpenses(), sd.getRevenue()))
                .toList();

        ReportGenerator report = new ReportGenerator();
        report.setFileName(fileName);
        report.setEmployeeName(employeeName);
        report.setEmployeeId(currentUser.getId());
        report.setProjectName(project.getName());
        report.setProjectId(project.getId());
        report.setReportDate(date);
        report.setGraphDataList(copiedData);
        currentUser.getCompany().addReport(report);

        reportGeneratorRepository.save(report);

        System.out.println("Created report for project " + project.getName());
        System.out.println("Date: " + LocalDate.now());

        return pdfOut.toByteArray();
    }


    public String deleteReport(long report_id){
        ReportGenerator report = reportGeneratorRepository.findById(report_id);
        if(report == null) throw new RuntimeException("Report not found");
        reportGeneratorRepository.delete(report);

        return success;
    }
}
