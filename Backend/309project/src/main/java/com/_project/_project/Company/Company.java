package com._project._project.Company;

import com._project._project.Department.Department;
import com._project._project.Project.Project;
import com._project._project.ReportGenerator.ReportGenerator;
import com._project._project.User.User;
import com._project._project.User.UserRole;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import org.jetbrains.annotations.NotNull;
import lombok.Data;

import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "companies")
@Data
public class Company {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    @Column(unique = true)
    private String ein;  // Format: XX-XXXXXXX

    // Add these address fields
    private String streetAddress;
    private String city;
    private String state;
    private String zipCode;
    private String country;

    @OneToMany(mappedBy = "company", cascade = CascadeType.ALL)
    @JsonIgnore
    private List<ReportGenerator> reports = new ArrayList<>();

    @OneToMany(mappedBy = "company", cascade = CascadeType.ALL)
    @JsonIgnore
    private List<Project> projects = new ArrayList<>();

    @OneToMany(mappedBy = "company", cascade = CascadeType.ALL)
    //Can have multiple users(employees) within a company, one-to-many relation
    @JsonIgnore
    private List<User> users = new ArrayList<>();

    @OneToMany(mappedBy = "company", cascade = CascadeType.ALL)
    @JsonIgnore
    private List<Department> departments = new ArrayList<>();

    @Column(columnDefinition = "LONGTEXT")
    private String companyLogo;

    public Company(String name) {this.name = name;}

    public Company() {
    }

    //getters and setters
    public Long getId() {return id;} //No need for setter because we want ID's to be autogenerated and avoid any issues by causing

    public String getName() {return name;}

    public void setName(String name) {this.name = name;}

    public String getEin() {return ein;}

    public void setEin(String ein) {this.ein = ein;}

    public String getStreetAddress() {return streetAddress;}

    public void setStreetAddress(String streetAddress) {this.streetAddress = streetAddress;}

    public String getCity() {return city;}

    public void setCity(String city) {this.city = city;}

    public String getState() {return state;}

    public void setState(String state) {this.state = state;}

    public String getZipCode() {return zipCode;}

    public void setZipCode(String zipCode) {this.zipCode = zipCode;}

    public String getCountry() {return country;}

    public void setCountry(String country) {this.country = country;}

    public String getCompanyLogo() {return companyLogo;}

    public void setCompanyLogo(String companyLogo) {this.companyLogo = companyLogo;}

    @JsonIgnore
    public List<User> getUsers() {return users;}

    @JsonIgnore
    public User getOwner() {
        return users.stream()
                .filter(user -> user.getRole() == UserRole.OWNER)
                .findFirst()
                .orElse(null);
    }

    public void addUser(@NotNull User user) {
        user.setCompany(this);
        users.add(user);
    }

    public List<Department> getDepartments() {return departments;}

    public void addDepartment(Department department) {
        department.setCompany(this);
        departments.add(department);
    }

    public void removeDepartment(Department department) {
        department.setCompany(null);
        departments.remove(department);
    }

    @JsonIgnore
    public List<Project> getProjects() {return projects;}

    public void addProject(@NotNull Project project) {
        project.setCompany(this);
        projects.add(project);
    }

    public void setId(Long id) {
        this.id = id;
    }

    public List<ReportGenerator> getReports() {return reports;}

    public void addReport(ReportGenerator report) {
        report.setCompany(this);
        reports.add(report);
    }

    public void removeReport(ReportGenerator report) {
        report.setCompany(null);
        reports.remove(report);
    }
}
